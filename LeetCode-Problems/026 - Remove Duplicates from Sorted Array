Given a sorted array, remove the duplicates in-place such that each element appear only once and return the new length.

Do not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory.

Example:

Given nums = [1,1,2],

Your function should return length = 2, with the first two elements of nums being 1 and 2 respectively.
It doesn't matter what you leave beyond the new length. 

//Solution - 1:
//LeetCode : Remove Duplicates from Sorted Array
//时间复杂度：O(n)，空间复杂度：O(1)
//相当于用vector内部的元素重新填写vector，初始状态下用保持vec的首元素不动
//从次元素开始,记录下一个应该插入的位置并遍历vct
class Solution {
public:
    int removeDuplicates(vector<int>& nums) {
		int len = nums.size();
        if( len == 0 || len == 1)
			return len;
		//  index 是后面不重复的元素应该被放到的位置
		//  curPostion 是当前元素所在的位置，需要与其前一个元素做判断 
		int index = 1,curPostion = 1;
		while(curPpostion < len) {
			if(nums[curPostion] > nums[curPostion-1])
				nums[index++] = nums[curPostion];
			curPostion ++；
		}
		return index; 
    }
};

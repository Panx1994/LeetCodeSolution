Descption:

Find the contiguous subarray within an array (containing at least one number) which has the largest sum.

For example, given the array [-2,1,-3,4,-1,2,1,-5,4],
the contiguous subarray [4,-1,2,1] has the largest sum = 6.

click to show more practice.

More practice:
If you have figured out the O(n) solution, try coding another solution using the divide and conquer approach, which is more subtle.


//Solution - 053:
//LeetCode : Maximum Subarray
//时间复杂度：O(n)，空间复杂度：O(1)
// dp 

class Solution {
public:
    int maxSubArray(vector<int>& nums) {
		int len = nums.size(),max ;
		vector<int> ans(nums.size(),0);
		ans[0] = nums[0];
		//a[i] stand sequence end with i maxsum
		for(int i = 1;i<nums.size();++i)
			ans[i] = ans[i-1] >0 ?
				ans[i-1] + nums[i]
				:nums[i];
		max = ans[0];		
		for(int i = 1;i<nums.size();++i)
			max = ans[i] > max ? ans[i] : max;
		return max;
    }
};

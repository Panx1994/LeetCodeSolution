Descption :

Given a binary tree, return the inorder traversal of its nodes' values.

For example:
Given binary tree [1,null,2,3],
   1
    \
     2
    /
   3
return [1,3,2].

Note: Recursive solution is trivial, could you do it iteratively?

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
 
//Solution - 094:
//LeetCode : Binary Tree Inorder Traversal



//Kind - 1 : 基于二叉树的递归方式的中序遍历
//时间复杂度：O(n)，空间复杂度：O(n)
//Attention ： 需要在辅助的递归函数里面使用的是&的形式
 
class Solution {
public:
    
    void InorderTrival(TreeNode* root,vector<int> & vct)
    {
        if(!root)
            return ;
        InorderTrival(root->left,vct);
        vct.push_back(root->val);
        InorderTrival(root->right,vct);
    }
    
    vector<int> inorderTraversal(TreeNode* root) {
        vector<int> vct;
        if(!root)
            return vct;
        InorderTrival(root,vct);
        return  vct;
    }
};

//Kind - 2 : 基于指针迭代方式的中序遍历
//时间复杂度：O(n)，空间复杂度：O(n)
//Attention ： 需要熟悉二叉树的中序遍历的非递归形式的具体实现
//Reference :
//二叉树中序遍历的非递归实现：
//根据中序遍历的顺序，对于任一结点，优先访问其左孩子，而左孩子结点又可以看做一根结点，然后继续访问其左孩子结点
//直到遇到左孩子结点为空的结点才进行访问，然后按相同的规则访问其右子树。因此其处理过程如下：
//对于任一结点P，
//1)若其左孩子不为空，则将P入栈并将P的左孩子置为当前的P，然后对当前结点P再进行相同的处理；
//2)若其左孩子为空，则取栈顶元素并进行出栈操作，访问该栈顶结点，然后将当前的P置为栈顶结点的右孩子；
//3)直到P为NULL并且栈为空则遍历结束

class Solution {
public:

    vector<int> inorderTraversal(TreeNode* root) {
        vector<int> vct;
        if(!root)
            return vct;
        stack<TreeNode *> st;
        TreeNode *p = root ;
		//Tricks ：不要在循环外将根入栈，外层循环需要用来pop栈顶的元素
        while(p || !st.empty())
        {
            while(p)
            {
                st.push(p);
                p = p->left;    
            }
            TreeNode * q = st.top();
            vct.push_back(q->val);
			//将右子节点当做左子节点处理
            p = q->right;
            st.pop();
        }
        return  vct;
    }
};

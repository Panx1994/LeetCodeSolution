Descption:

Given a binary tree, return the bottom-up level order traversal of its nodes' values. 
(ie, from left to right, level by level from leaf to root).

For example:
Given binary tree [3,9,20,null,null,15,7],
    3
   / \
  9  20
    /  \
   15   7
return its bottom-up level order traversal as:
[
  [15,7],
  [9,20],
  [3]
]

//Solution - 053:
//LeetCode : Maximum Subarray
//时间复杂度：O(n)，空间复杂度：O(n)
//二叉树层次遍历：每层内正序，每层间逆序

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
 
class Solution {
public:
    vector<vector<int>> levelOrderBottom(TreeNode* root) {
    	vector<vector<int>> myvct;
		deque<TreeNode*> qu;
		if(!root)
			return myvct;
		qu.push_back(root);
		while(!qu.empty())
		{
			int size = qu.size();
			vector<int> vct;
			TreeNode* cur;
			for(int i = 1;i<=size;++i)
			{
				cur = qu.front();
				vct.push_back(cur->val);
				qu.pop_front();
				if(cur->left)
					qu.push_back(cur->left);
				if(cur->right)
					qu.push_back(cur->right);
			}
			myvct.push_back(vct);
		}
		reverse(myvct.begin(),myvct.end());
		return myvct;
    }
};

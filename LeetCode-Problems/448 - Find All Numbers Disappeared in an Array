Descption :

Given an array of integers where 1 ≤ a[i] ≤ n (n = size of array), some elements appear twice and others appear once.

Find all the elements of [1, n] inclusive that do not appear in this array.

Could you do it without extra space and in O(n) runtime? You may assume the returned list does not count as extra space.

Example:

Input:
[4,3,2,7,8,2,3,1]

Output:
[5,6]


//Solution - 448:
//LeetCode : Find All Numbers Disappeared in an Array
//时间复杂度：O(n)，空间复杂度：O(n)
//for 1 ≤ a[i] ≤ n (n = size of array)，非常适合用hash思想处理
//一轮遍历进行hash，一轮遍历寻找那些没有被占的坑

class Solution {
public:
    vector<int> findDisappearedNumbers(vector<int>& nums) {
        int len = nums.size();
        vector<int> vct(len + 1,0);
        for(int i = 0;i<len;++i)
            vct[nums[i]] = 1;
        vector<int> ans;
        for(int i = 1;i<=len;++i)
            if(vct[i]!=1)
                ans.push_back(i);
        return ans;
    }
};

Descption :

Given two binary trees and imagine that when you put one of them to cover the other 

some nodes of the two trees are overlapped while the others are not.

You need to merge them into a new binary tree. The merge rule is that if two nodes overlap

then sum node values up as the new value of the merged node. Otherwise, the NOT null node will be used as the node of new tree.

Example 1:
Input: 
	Tree 1                     Tree 2                  
          1                         2                             
         / \                       / \                            
        3   2                     1   3                        
       /                           \   \                      
      5                             4   7                  
Output: 
Merged tree:
	     3
	    / \
	   4   5
	  / \   \ 
	 5   4   7
   
Note: The merging process must start from the root nodes of both trees.

//Solution - 617:
//LeetCode : Merge Two Binary Trees
//时间复杂度：O(n)，空间复杂度：O(n)
//经典二叉树带递归问题：
//1.两个指针同时nullptr
//2.有且仅有一个指针为nullptr
//3.两个指针同时俊非空
//需要注意的是，返回的指针保证了树状结构的指针指向，只需要沿袭其原始的左右方向


/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    TreeNode* mergeTrees(TreeNode* t1, TreeNode* t2) {
        if(!t1 && !t2)
            return t1;
        if(!t1)
            return t2;
        if(!t2)
            return t1;
        TreeNode* root = new TreeNode(0);
        root->val = t1->val + t2->val;
        root->left = mergeTrees(t1->left,t2->left);
        root->right = mergeTrees(t1->right,t2->right);
        return root;
    }
};

Descption :

Given an array consisting of n integers, find the contiguous subarray of given length k that has the maximum average value. And you need to output the maximum average value.

Example 1:
Input: [1,12,-5,-6,50,3], k = 4
Output: 12.75
Explanation: Maximum average is (12-5-6+50)/4 = 51/4 = 12.75
Note:
1 <= k <= n <= 30,000.
Elements of the given array will be in the range [-10,000, 10,000].


//Solution - 643:
//LeetCode : Maximum Average Subarray I
//时间复杂度：O(n)，空间复杂度：O(1)
//Transform the problem :
//the max aver with contain len-k means max sum with contiguous len-k

class Solution {
public:
    double findMaxAverage(vector<int>& nums, int k) {
        double sum = 0,max;
        for(int i = 0;i<k;++i)
            sum += nums[i];
        max = sum;
		//以当前位置开始的k的元素的和大部分重叠与前一个位置的
		//可以用有效的元素替代掉失效的元素
        for(int i = k;i<nums.size();++i)
        {
            sum = sum - nums[i-k] + nums[i];
            max = max > sum ? max:sum;
        }
        return max/k;
    }
};

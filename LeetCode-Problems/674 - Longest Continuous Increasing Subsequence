Descption :

Given an unsorted array of integers, find the length of longest continuous increasing subsequence (subarray).

Example 1:
Input: [1,3,5,4,7]
Output: 3
Explanation: The longest continuous increasing subsequence is [1,3,5], its length is 3. 
Even though [1,3,5,7] is also an increasing subsequence, it's not a continuous one where 5 and 7 are separated by 4. 
Example 2:
Input: [2,2,2,2,2]
Output: 1
Explanation: The longest continuous increasing subsequence is [2], its length is 1. 
Note: Length of the array will not exceed 10,000.

//Solution - 674:
//LeetCode : Longest Continuous Increasing Subsequence
//时间复杂度：O(n)，空间复杂度：O(1)
//最长连续上升子序列

class Solution {
public:
    int findLengthOfLCIS(vector<int>& nums) {
        if(nums.empty())
            return 0;
        int len = nums.size() ,max = 1;
        vector<int> ans(len,1);
        for(int i = 1;i<len;++i)
            if(nums[i]>nums[i-1])
            {
                ans[i] = ans[i-1] + 1;
                max = ans[i] > max ? ans[i] : max;
            }   
        return max;
    }
};
